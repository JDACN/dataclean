clear
find.package("devtools")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmoothIRT")
ls
ls()
a
find.package("devtools")
install.packages("devtools")
find.package("devtools")
exists()
library(devtools)
find_rtools()
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
x <- c(10,20,30,35,40, 44, 47 , 50, 51)
plot(c)
names(x) <- ('one','two','three','four','five','six','seven','eight','nine')
names(x) <- ("one", "two", "three", "four","five","six","seven","eight","nine")
names(x) <- c("one", "two", "three", "four","five","six","seven","eight","nine")
plot(c)
barplot(c)
help("barplot")
barplot(x)
plot(x,x,"l")
ls
ls()
cat (x)
cat ("vector X =" , x , " length:" ,length(x))
ls.str()
y <- c(100,200,130,110,120)
plot(x,y,"l")
barplot(x,sub = "GST")
barplot(y)
mean(x)
median(x)
median(y)
y
mean(y)
mode(x)
quantile(x)
quantile(y)
ls
ls()
rm(x)
ls()
rm(y)
x <- c(80,29,68,99,29,44,39)
library(ggplot2)
ggplot(x)
?ggplot
barplot(x)
plot(x,,"l")
names(x) <-c ('cib','ff','xx','zz','dd','ee','rr')
plot(x,,"l")
plot(x,x,"l")
barplot(x)
ggplot(x)
mean(x)
median(x)
sd(x)
plot(x,,"l")
x <- frame(x)
var(x)
cor(x)
1:5
seq(1,10,3)
rep(1,4)
rep("No",5)
y <- seq(10,70,10)
y
x < y
z <- rep(35,7)
x > z
any(x>z)
all(x>z)
x[x>z]
x[-(x>z)]
x[x<z]
x
quantile(x,0.05)
quantile(x,0.85)
quantile(x)
x - mean(x)
x - median(x)
median(x)
x
sort(x)
sort(x) - median(x)
cat (x, names(x))
cat(x[5],names(x[5]))
cat(x[5],names(x[5]))
table(x)
structure(x)
str(x)
library('swirl')
swirl()
TRUE == T
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 >4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram ("OOOOO", "XXXXXX", sep="Z")
submit()
mad_libs("Mumbai","great","it")
submit()
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
class(t2)
str(unclass(t2)
)
t2$min
d1$weekdays()
d1$weekdays
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
bye()
library(datasets)
data("iris")
?iris
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x + y)
Rprof(NULL)
library(swirl)
swirl()
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(nplants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period).
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = T)
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
sample(c(0,1),100,prob = c(0.3,0.7))
sample(c(0,1),100,prob = c(0.3,0.7),replace = TRUE)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(c(0,1),size=100, prob =0.7)
flips2 <- rbinom(100,size=1, prob =0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x= cars$speed, y = cars$dist)
plot(y= cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist )
plot(x = cars$speed, y = cars$dist, xlab ="Speed")
plot(x = cars$speed, y = cars$dist, xlab ="Speed" ,ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab ="Speed" ,ylab = "Stopping Distance")
plot(cars,main="My Plot")
?plot
plot(cars,sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
date()
format(date(),"%B%d")
format(date(),"%B %d")
format(date(),format="%B %d")
format(date(),format="%d")
strDates <- c("01/05/1965", "08/16/1975")
dates <- as.Date(strDates, "%m/%d/%Y")
dates
t0day <- date()
format(t0day, format= "%B %d %Y")
library(xml)
library("xml")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
mydf
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
bye()
n <- readline(prompt="Enter an integer: ")
n
con <- url("http://www.moneycontrol.com/sensex/bse/sensex-live")
htmlcode = readlines(con)
htmlcode = readLines(con)
htmlcode
close(con)
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
2
3
myapp <- oauth_app("quiz2",
key = "b87a2841e89ce55fe15e",
secret = "b1d4ede3d6f11878f51d0a842e3aa4c219b59c27")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos",
config(token = github_token))
stop_for_status(req)
output <- content(req)
jsondata <- fromJSON(toJSON(output))
subset(jsondata, name == "datasharing", select = c(created_at))
plot(x)
plot(y)
line(x)
histo g
d <- read.csv("http://download.finance.yahoo.com/d/quotes.csv?s=AAPL&f=sl1d1t1c1ohgv&e=.csv")
d
d <- read.csv("http://download.finance.yahoo.com/d/quotes.csv?s=AAPL&f=sl1d1t1c1ohgv&e=.csv" , colClasses = "Character"
)
d <- read.csv("http://download.finance.yahoo.com/d/quotes.csv?s=AAPL&f=sl1d1t1c1ohgv&e=.csv" , check.names = F)
d
?read.csv
d <- read.csv("http://download.finance.yahoo.com/d/quotes.csv?s=AAPL&f=sl1d1t1c1ohgv&e=.csv" , check.names = F)
data("UCBAdmissions")
DF = as.data.frame(data)
DF = as.data.frame("UCBAdmissions")
Summary(DF)
summary(DF)
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt<-xtabs(freq ~ Admit + Gender, data= DF)
xt<-xtabs(Freq ~ Admit + Gender, data= DF)
xt
table(DF$Gender)
table(DF$Admit,DF$Gender)
DT
DF
sapply(DF,sum)
tabel(DF$Dept)
table(DF$Dept)
lapply(DF$Dept,sum)
lapply(DF$Freq,sum)
fileurl1 = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
data1 <- read.csv(fileurl1)
ead(data1)
Regards,
Jayant Dhawale
PMP, Agile PM,  ITIL V3, SAP Certified Associate
(M) +91 902 902 8304 h
h
head(data1)
getwd()
setwd(coursera)
setwd("Coursera")
getwd()
dir.create("dataclean")
setwd("dataclean")
?which
source(file = "week3.R")
source(file = "week3.R")
install.packages("jpeg")
source(file = "week3.R")
source(file = "week3.R")
source(file = "week3.R")
source(file = "week3.R")
install.packages("data.table")
install.packages("data.table")
source(file = "week3.R")
source(file = "week3.R")
source(file = "week3.R")
source(file = "week3.R")
source(file = "week3.R")
str(merge)
source(file = "week3.R")
source(file = "week3.R")
source(file = "week3.R")
source(file = "week3.R")
swirl()
library(swirl)
swirl()
1:20
5:20
cran
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20.
-(5:20)
X
select(cran,-X:size)
info()
skip()
filter(cran,packae == "swirl" )
filter(cran, package == "swirl")
filter(cran,
| r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
str(cran)
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrane(cran2,desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country , desc(r_version) , ip_id )
cran3 <- select(cran, ip_id, package, size )
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20 ,size_gb = size_mb / 2^10)
mutate(cran3,correct_size  = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
mydf
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum , n() > 679)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,count)
top_counts_sorted <- arrange(top_counts,desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum,pack_sum$unique > 465)
top_unique <- filter(pack_sum,unique > 465)
View(top_unique )
arrange( top_unique , desc(unique)) -> top_unique_sorted
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex, count, -grade)
students2
gather(data = students2, key = sex_class , value = count ) -> res
gather(data = students2, key = sex_class , value = count, -grade) -> res
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread()
spread
?spread
submit()
submit()
skip()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
skip()
submit()
passed
failed
mutate(passed , status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
packageVersion('dplyr')
bind_rows(passed , failed)
sat
submit()
skip()
submit()
skip()
